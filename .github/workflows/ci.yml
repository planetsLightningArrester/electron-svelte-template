# Continuos Integration workflow
name: 🔄 CI

defaults:
  run:
    shell: bash

# Controls when the workflow will run
on:
  pull_request: 
    paths: 
      - .github/workflows/ci.yml
      - backend/**/*
      - frontend/**/*
      - package.json
      - tsconfig.json

  push:
    branches: ['main']
    paths: 
      - .github/workflows/ci.yml
      - backend/**/*
      - frontend/**/*
      - package.json
      - tsconfig.json

  # Can be triggered by other workflows
  workflow_call:
    inputs:
      latest_deps:
        type: boolean
        default: false
        description: Whether the latest dependencies should be used.
      success_on_failure:
        type: boolean
        default: false
        description: Whether the workflow should be marked as succeed even on failures. Relevant for auto-update checks.
    outputs:
      success:
        description: Whether this workflow failed or succeed. Only relevant if `inputs.success_on_failure` is `true`.
        value: ${{ jobs.set_success_output.outputs.success }}

  # Allow manual trigger
  workflow_dispatch:
    inputs:
      latest_deps:
        type: boolean
        default: false
        description: Whether the latest dependencies should be used.
      success_on_failure:
        type: boolean
        default: false
        description: Whether the workflow should be marked as succeed even on failures. Relevant for auto-update checks.

# Set to `false` when some step in the workflow fail. The last step gather it and set to the output result
env:
  success: true

# Jobs
jobs:

  sanitize:
    name: "🧹 Sanitize"
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🛠️ NodeJS setup
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: 🔧 Install latest dependencies
        if: ${{ always() && contains(inputs.latest_deps, 'true') }}
        run: |
          {
            npm ci
            cd backend
            ../scripts/force_update.sh
            cd ../frontend
            ../scripts/force_update.sh
          } || {
            [[ "${{ inputs.success_on_failure }}" != "true" ]] && exit 1
            echo "success=false" >> $GITHUB_ENV
          }

      - name: 🔧 Install dependencies
        if: ${{ always() && !contains(inputs.latest_deps, 'true') }}
        run:  |
          npm ci || {
            [[ "${{ inputs.success_on_failure }}" != "true" ]] && exit 1
            echo "success=false" >> $GITHUB_ENV
          }

      - name: 🧹 Run linters
        if: ${{ env.success == 'true' }}
        run: |
          npm run lint || {
            [[ "${{ inputs.success_on_failure }}" != "true" ]] && exit 1
            echo "success=false" >> $GITHUB_ENV
          }

  test:
    strategy:
      fail-fast: false
      matrix:
        os: [{ version: ubuntu-latest, script: ../scripts/force_update.sh }, { version: windows-latest, script: ../scripts/force_update.ps1 }, { version: macOS-latest, script: ../scripts/force_update.sh }]
    name: "🧪 Test (${{ matrix.os.version }})"
    runs-on: ${{ matrix.os.version }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🛠️ NodeJS setup
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: 🔧 Install latest dependencies
        if: ${{ always() && contains(inputs.latest_deps, 'true') }}
        run: |
          {
            npm ci
            cd backend
            ${{ matrix.os.script }}
            cd ../frontend
            ${{ matrix.os.script }}
          } || {
            [[ "${{ inputs.success_on_failure }}" != "true" ]] && exit 1
            echo "success=false" >> $GITHUB_ENV
          }

      - name: 🔧 Install dependencies
        if: ${{ always() && !contains(inputs.latest_deps, 'true') }}
        run:  |
          npm ci || {
            [[ "${{ inputs.success_on_failure }}" != "true" ]] && exit 1
            echo "success=false" >> $GITHUB_ENV
          }

      - name: 🧪 Run test
        if: ${{ env.success == 'true' }}
        run: |
          npm run test || {
            [[ "${{ inputs.success_on_failure }}" != "true" ]] && exit 1
            echo "success=false" >> $GITHUB_ENV
          }

  build:
    strategy:
      fail-fast: false
      matrix:
        os: [{ version: ubuntu-latest, script: ../scripts/force_update.sh }, { version: windows-latest, script: ../scripts/force_update.ps1 }, { version: macOS-latest, script: ../scripts/force_update.sh }]
    name: "📦 Build (${{ matrix.os.version }})"
    runs-on: ${{ matrix.os.version }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🛠️ NodeJS setup
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: 🔧 Install latest dependencies
        if: ${{ always() && contains(inputs.latest_deps, 'true') }}
        run: |
          {
            npm ci
            cd backend
            ${{ matrix.os.script }}
            cd ../frontend
            ${{ matrix.os.script }}
          } || {
            [[ "${{ inputs.success_on_failure }}" != "true" ]] && exit 1
            echo "success=false" >> $GITHUB_ENV
          }

      - name: 🔧 Install dependencies
        if: ${{ always() && !contains(inputs.latest_deps, 'true') }}
        run:  |
          npm ci || {
            [[ "${{ inputs.success_on_failure }}" != "true" ]] && exit 1
            echo "success=false" >> $GITHUB_ENV
          }

      - name: 📦 Run build
        if: ${{ env.success == 'true' }}
        run: |
          npm run build || {
            [[ "${{ inputs.success_on_failure }}" != "true" ]] && exit 1
            echo "success=false" >> $GITHUB_ENV
          }

  set_success_output:
    name: 🎯 Set success output
    needs: [sanitize, test, build]
    if: ${{ always() }}
    runs-on: ubuntu-latest
    outputs:
      success: ${{ steps.set-success.outputs.success }}
    steps:
      - name: 🎯 Set success output
        id: set-success
        run: echo "success=${{ env.success }}" >> $GITHUB_OUTPUT
